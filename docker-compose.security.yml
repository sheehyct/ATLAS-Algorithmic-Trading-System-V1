# ============================================================================
# STRAT Trading System - Security-Hardened Docker Compose
# ============================================================================
# Enterprise-grade security configuration with zero-trust model
# Implements defense-in-depth security layers
# ============================================================================

version: '3.8'

# ============================================================================
# Security Configuration
# ============================================================================
x-security-opts: &security-opts
  security_opt:
    - no-new-privileges:true
    - apparmor:docker-default
    - seccomp:docker/security/seccomp.json
  cap_drop:
    - ALL
  cap_add:
    - CHOWN
    - DAC_OVERRIDE
    - SETGID
    - SETUID
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=100M
    - /run:noexec,nosuid,size=10M

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "service,environment,security"

services:
  # ============================================================================
  # Secrets Management Service (HashiCorp Vault)
  # ============================================================================
  vault:
    image: vault:1.15
    container_name: strat-vault
    restart: unless-stopped
    <<: *security-opts
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_LOG_LEVEL: info
    ports:
      - "127.0.0.1:8200:8200"
    volumes:
      - vault-data:/vault/data:rw
      - ./docker/security/vault/config:/vault/config:ro
      - ./docker/security/vault/policies:/vault/policies:ro
    networks:
      - strat-secure-network
    logging: *default-logging
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # Security Scanner Service (Trivy)
  # ============================================================================
  security-scanner:
    image: aquasec/trivy:0.45.0
    container_name: strat-security-scanner
    restart: unless-stopped
    <<: *security-opts
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy-cache:/tmp/trivy:rw
      - ./docker/security/trivy:/config:ro
      - security-reports:/reports:rw
    networks:
      - strat-secure-network
    logging: *default-logging
    command: ["server", "--listen", "0.0.0.0:4954"]
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:4954/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Runtime Security Monitoring (Falco)
  # ============================================================================
  falco:
    image: falcosecurity/falco:0.36.0
    container_name: strat-falco
    restart: unless-stopped
    privileged: true
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - /etc:/host/etc:ro
      - ./docker/security/falco/rules:/etc/falco/rules.d:ro
      - falco-data:/var/log/falco:rw
    networks:
      - strat-secure-network
    logging: *default-logging
    environment:
      FALCO_BPF_PROBE: ""
    command: ["/usr/bin/falco", "-pc", "-o", "json_output=true", "-o", "file_output.enabled=true"]

  # ============================================================================
  # Web Application Firewall (ModSecurity)
  # ============================================================================
  waf:
    image: owasp/modsecurity-crs:3.3.4-nginx
    container_name: strat-waf
    restart: unless-stopped
    <<: *security-opts
    cap_add:
      - NET_BIND_SERVICE
    environment:
      MODSEC_RULE_ENGINE: "On"
      MODSEC_REQ_BODY_ACCESS: "On"
      MODSEC_RESP_BODY_ACCESS: "On"
      MODSEC_PCRE_MATCH_LIMIT: "100000"
      MODSEC_PCRE_MATCH_LIMIT_RECURSION: "100000"
      MODSEC_AUDIT_LOG: "/var/log/modsec/audit.log"
      PARANOIA: "2"
      ANOMALY_INBOUND: "5"
      ANOMALY_OUTBOUND: "4"
      BACKEND: "http://strat-app:8000"
    ports:
      - "127.0.0.1:8080:80"
    volumes:
      - ./docker/security/waf/rules:/etc/modsecurity/rules:ro
      - ./docker/security/waf/nginx.conf:/etc/nginx/nginx.conf:ro
      - waf-logs:/var/log/modsec:rw
    networks:
      - strat-secure-network
    logging: *default-logging
    depends_on:
      - strat-app

  # ============================================================================
  # Security-Hardened Application Service
  # ============================================================================
  strat-app:
    build:
      context: .
      dockerfile: docker/security/Dockerfile.security
      target: runtime
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-latest}
    image: strat-trading-secure:${VERSION:-latest}
    container_name: strat-app
    restart: unless-stopped
    <<: *security-opts
    environment:
      - STRAT_ENVIRONMENT=${STRAT_ENVIRONMENT:-production}
      - STRAT_LOG_LEVEL=${STRAT_LOG_LEVEL:-INFO}
      - STRAT_SECURITY_MODE=strict
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_APP_TOKEN}
      - POSTGRES_HOST=strat-db
      - REDIS_HOST=strat-cache
      - PROMETHEUS_HOST=strat-prometheus
      # Secrets fetched from Vault at runtime
    volumes:
      - strat-logs:/app/logs:rw
      - strat-data:/app/data:rw
      - strat-cache:/app/cache:rw
      - strat-results:/app/backtest_results:rw
      - ./config:/app/config:ro
    depends_on:
      vault:
        condition: service_healthy
      strat-db:
        condition: service_healthy
      strat-cache:
        condition: service_healthy
    networks:
      - strat-secure-network
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
          pids: 256
        reservations:
          cpus: '2.0'
          memory: 4G
    healthcheck:
      test: ["CMD", "python", "/app/security/security_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================================================
  # Security-Hardened Database Service
  # ============================================================================
  strat-db:
    image: postgres:16-alpine
    container_name: strat-db
    restart: unless-stopped
    <<: *security-opts
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    read_only: false  # Database needs write access
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-strat_trading}
      POSTGRES_USER: ${POSTGRES_USER:-stratuser}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    secrets:
      - db_password
    volumes:
      - strat-postgres-data:/var/lib/postgresql/data:rw
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./docker/security/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./docker/security/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - strat-secure-network
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-stratuser} -d ${POSTGRES_DB:-strat_trading}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ============================================================================
  # Security-Hardened Cache Service
  # ============================================================================
  strat-cache:
    image: redis:7-alpine
    container_name: strat-cache
    restart: unless-stopped
    <<: *security-opts
    read_only: false  # Redis needs write access
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --protected-mode yes
      --tcp-backlog 511
      --tcp-keepalive 300
      --timeout 0
      --bind 0.0.0.0
      --port 6379
      --save 900 1
      --save 300 10
      --save 60 10000
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    secrets:
      - redis_password
    volumes:
      - strat-redis-data:/data:rw
      - ./docker/security/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - strat-secure-network
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ============================================================================
  # Security Monitoring Dashboard
  # ============================================================================
  security-dashboard:
    image: grafana/grafana:10.1.0
    container_name: strat-security-dashboard
    restart: unless-stopped
    <<: *security-opts
    read_only: false  # Grafana needs write access for provisioning
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_password
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_SECRET_KEY__FILE: /run/secrets/grafana_secret
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
      GF_SECURITY_X_CONTENT_TYPE_OPTIONS: "true"
      GF_SECURITY_X_XSS_PROTECTION: "true"
      GF_SECURITY_CONTENT_SECURITY_POLICY: "true"
    secrets:
      - grafana_password
      - grafana_secret
    ports:
      - "127.0.0.1:3001:3000"
    volumes:
      - grafana-security-data:/var/lib/grafana:rw
      - ./docker/security/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/security/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - strat-secure-network
    logging: *default-logging
    depends_on:
      - strat-prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # ============================================================================
  # Compliance Scanner (OpenSCAP)
  # ============================================================================
  compliance-scanner:
    image: openscap/openscap:latest
    container_name: strat-compliance
    restart: unless-stopped
    <<: *security-opts
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/security/openscap:/config:ro
      - compliance-reports:/reports:rw
    networks:
      - strat-secure-network
    logging: *default-logging
    command: ["oscap", "xccdf", "eval", "--profile", "cis-docker", "/config/cis-docker-benchmark.xml"]

# ============================================================================
# Networks Configuration
# ============================================================================
networks:
  strat-secure-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: strat_secure
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.enable_icc: "false"  # Disable inter-container communication
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
    internal: false
    attachable: false

# ============================================================================
# Volumes Configuration
# ============================================================================
volumes:
  strat-logs:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker/volumes/logs
      o: bind
  strat-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker/volumes/data
      o: bind
  strat-cache:
    driver: local
  strat-results:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/docker/volumes/results
      o: bind
  strat-postgres-data:
    driver: local
    driver_opts:
      o: "uid=10001,gid=10001"
  strat-redis-data:
    driver: local
    driver_opts:
      o: "uid=10001,gid=10001"
  vault-data:
    driver: local
  trivy-cache:
    driver: local
  security-reports:
    driver: local
  waf-logs:
    driver: local
  falco-data:
    driver: local
  grafana-security-data:
    driver: local
  compliance-reports:
    driver: local

# ============================================================================
# Secrets Configuration
# ============================================================================
secrets:
  db_password:
    file: ./docker/secrets/db_password.txt
  redis_password:
    file: ./docker/secrets/redis_password.txt
  grafana_password:
    file: ./docker/secrets/grafana_password.txt
  grafana_secret:
    file: ./docker/secrets/grafana_secret.txt
  vault_token:
    file: ./docker/secrets/vault_token.txt